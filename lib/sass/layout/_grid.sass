//----------------------------------------------------------------------------------------------------------------------
// GRID CONTAINER
//
// Wrapper for grid cells.
//----------------------------------------------------------------------------------------------------------------------

.grid
	display: grid
	grid-template-columns: repeat($grid-columns, 1fr)
	grid-gap: $grid-gap

	// Compact grids have reduced grip-gap
	&.compact
		grid-gap: rhythm(1)

	// Slap a float layout on non-supporting browsers and simulate grid-gap with padding/margin
	+supports-no("cssgrid")
		display: block
		margin: $grid-gap / -2 // Compensate extra padding from edge columns
		+clearfix
		> [class^="cell-"]
			float: left
			padding: $grid-gap / 2
		&.compact
			margin: rhythm(1) / -2
			> [class^="cell-"]
				&.compact
					padding: rhythm(1) / 2

	// It is far more efficient to include the width property for all browsers and unset it again on browsers that do
	// support grids instead of generating different sets of statements for supporting and non-supporting browsers.
	+supports("cssgrid")
		> [class^="cell-"]
			width: unset

	// Viewport sizes
	@if $grid-gap-s > $grid-gap
		+media(">=", $breakpoint-s)
			grid-gap: $grid-gap-s
	@if $grid-gap-m > $grid-gap-s
		+media(">=", $breakpoint-m)
			grid-gap: $grid-gap-m
	@if $grid-gap-l > $grid-gap-m
		+media(">=", $breakpoint-l)
			grid-gap: $grid-gap-l



//----------------------------------------------------------------------------------------------------------------------
// GRID CELLS
//
// May contain sub grids.
//----------------------------------------------------------------------------------------------------------------------

@for $i from 1 through $grid-columns
	.cell-#{$i}
		grid-column-end: span $i
		width: $i / $grid-columns * 100% // Width property for non-supporting browsers, see above

// Other viewports
@each $size, $breakpoint in ("s":$breakpoint-s, "m":$breakpoint-m, "l":$breakpoint-l, "nav": $nav-breakpoint)
	+media(">=", $breakpoint)
		@for $i from 1 through $grid-columns
			.cell-#{$size}-#{$i}
				grid-column-end: span $i
				width: $i / $grid-columns * 100%